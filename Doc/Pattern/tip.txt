模式(Pattern) 是对重复出现问题的解决办法的经验总结 相似或相同的问题可用以往的经验办法处理 硬件架构模式 网络架构模式 软件架构模式 设计模式(实现时采用的重复出现的问题的解决办法) 
(Context Problem Resolution) 
架构模式/Architetural Pattern 

Layers(严格分层) 自顶向下(Request) 自底向上(Response) 复用/去复用 协议栈 变种(松散分层 层间交互可以跨层-性能、灵活性好，维护难 通过继承分层-基类作为低层) /层实例 虚拟机(JVM CLR) API OS
好处是重用、标准化、局部依赖、可替换， 树型接构、线型结构

Pipes and Filters 处理数据流的系统(流水线) 主动对象-具有线程功能/被动对象-不具线程功能 Push/Pull Publish/Subscribe Sender/Receiver
DataSource-->流水线(Pipeline)上处理单元(Filter，Process/Thread)--管道(Pipe)--处理单元(Filter，Function/Procedure)-->DataSink

Blackboard 黑板模式的应用场景是要解决的任务可以分为多个子任务 利用数据库/利用发布―订阅模式 做黑板  知识共享(知识源) 智能分析 模糊识别 智能算法
Broker 代理组件负责协调通信(海康API就是代理 CORBA RPC) 包含六种组件 Client(接口使用者)<-->ClientEndProxy<-->BrokerA<-->BridgeA(Broker互通)<-->BridgeB<-->BrokerB<-->ServerEndProxy<-->Server(接口实现者)
A协议(客户与BrokerA)<-->通用协议(桥间协议)<->B协议(服务器与BrokerB)

Model-View-Controller M封装了内核功能和数据 V展示M的数据 每个V都有一个C C接收输入(调度、派发)
Presentation-Abstraction-Control AgentTree
MicroKernel
Reflection

主动 使用Process Thread实现 被动 使用共享库 普通函数实现
适应性系统
Microkernel(Client---Adapter---Eeternal server---Microkernel---Internal server)
Reflection(Meta data / Meta object protocol)

设计模式/Design Pattern 子系统 组件等 独立于语言 设计阶段 观察者 推拉 发布预订 事件
惯用法/Idiom 最低层模式 与特定语言相关 实现阶段 Java .Net模式 计数器 工厂 单实例

Pattern System / Pattern Catalog

面向模式的软件体系结构+卷1-模式系统.pdf 112/297

Unity3D Delta3D

Win32Asm
RadAsm WinAsm IDE
http://www.masm32.com/