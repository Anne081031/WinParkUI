

http://csharp-source.net/ C#开源代码

PowerDesigner Visio Rose
UML BPNM BPEL CDM LDM PDM ER IDEF1X

FORTRAN语言 Formula Translation 能够用数学公式表达的问题而设计的

COBOL（COmmonBusinessOrientedLanguage） 在企业管理中，数值计算并不复杂，但数据处理信息量却很大.COBOL主要是应用于银行、金融和会计行业等非常重要的商业数据处理领域

Pascal 数据结构与算法
S/S-plus语言 R是基于S语言 统计算法
Simula - 6 7是第一个面向对象的语 Smalltalk被公认为历史上第二个面向对象的程序设计语

OOP 面向对象编程是关注将需求功能划分为不同的并且相对独立，封装良好的类，并让它们有着属于自己的行为，依靠继承和多态等来定义彼此的关系
AOP 面向方面编程则是希望能够将通用需求功能从不相关的类当中分离出来，能够使得很多类共享一个行为，一旦发生变化，不必修改很多类，而只需要修改这个行为即可。

OOP允许你定义从上到下的关系，但并不适合定义从左到右的关系。
AOP技术则恰恰相反，它利用一种称为“横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其名为“Aspect”，即方面。所谓“方面”，简单地说，就是将那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可操作性和可维护性。AOP代表的是一个横向的关系，如果说“对象”是一个空心的圆柱体，其中封装的是对象的属性和行为；那么面向方面编程的方法，就仿佛一把利刃，将这些空心圆柱体剖开，以获得其内部的消息。而剖开的切面，也就是所谓的“方面”了。然后它又以巧夺天功的妙手将这些剖开的切面复原，不留痕迹。

AOP的目的就是将核心关注点和横切关注点分离 J2EE应用系统就相当于AOP技术中的核心关注点，它的内容主要包括企业系统的商业逻辑；而J2EE容器则类似于横切关注点，实现的是通用的功能机制。