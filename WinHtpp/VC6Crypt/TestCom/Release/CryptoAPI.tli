// Created by Microsoft (R) C/C++ Compiler Version 12.00.8168.0 (1220728d).
//
// d:\winparkui\winhtpp\vc6crypt\testcom\release\CryptoAPI.tli
//
// Wrapper implementations for Win32 type library ../CryptoAPI.tlb
// compiler-generated file created 12/09/11 at 15:36:45 - DO NOT EDIT!

#pragma once

//
// interface ICrypto wrapper method implementations
//

inline HRESULT ICrypto::EncryptDoc ( _bstr_t bstrSrc, const _variant_t & varDestination ) {
    HRESULT _hr = raw_EncryptDoc(bstrSrc, varDestination);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICrypto::DecryptDoc ( _bstr_t bstrSrc, const _variant_t & varDestination ) {
    HRESULT _hr = raw_DecryptDoc(bstrSrc, varDestination);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ICrypto::Base64EncodeString ( _bstr_t bstrSrc ) {
    BSTR _result;
    HRESULT _hr = raw_Base64EncodeString(bstrSrc, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICrypto::Base64DecodeString ( _bstr_t bstrSrc ) {
    BSTR _result;
    HRESULT _hr = raw_Base64DecodeString(bstrSrc, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICrypto::EncryptString ( _bstr_t bstrSrc ) {
    BSTR _result;
    HRESULT _hr = raw_EncryptString(bstrSrc, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICrypto::DecryptString ( _bstr_t bstrSrc ) {
    BSTR _result;
    HRESULT _hr = raw_DecryptString(bstrSrc, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t ICrypto::GetDigitalSignature ( ) {
    BSTR _result;
    HRESULT _hr = get_DigitalSignature(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long ICrypto::VerifyDigitalSignature ( _bstr_t bstrDigitalSig ) {
    long _result;
    HRESULT _hr = raw_VerifyDigitalSignature(bstrDigitalSig, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT ICrypto::Base64EncodeFile ( _bstr_t bstrSrc, const _variant_t & varDestination ) {
    HRESULT _hr = raw_Base64EncodeFile(bstrSrc, varDestination);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT ICrypto::Base64DecodeFile ( _bstr_t bstrSrc, const _variant_t & varDestination ) {
    HRESULT _hr = raw_Base64DecodeFile(bstrSrc, varDestination);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ICrypto::Base64EncodeFileToString ( _bstr_t bstrSrc ) {
    BSTR _result;
    HRESULT _hr = raw_Base64EncodeFileToString(bstrSrc, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT ICrypto::Base64DecodeStringToFile ( _bstr_t bstrSrc, _bstr_t bstrDestination ) {
    HRESULT _hr = raw_Base64DecodeStringToFile(bstrSrc, bstrDestination);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t ICrypto::GetContainerName ( ) {
    BSTR _result;
    HRESULT _hr = get_ContainerName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void ICrypto::PutContainerName ( _bstr_t pVal ) {
    HRESULT _hr = put_ContainerName(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
